#include <iostream>
#include <vector>
#include <climits>


using namespace std;


struct Edge {
    int src, dest, weight;
};


void bellmanFord(vector<Edge> &edges, int V, int E, int source) {
    vector<int> distance(V, INT_MAX);
    distance[source] = 0;


    for (int i = 1; i < V; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;


            if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
                distance[v] = distance[u] + weight;
            }
        }
    }


    // Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int weight = edges[j].weight;


        if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
            cout << "Graph contains a negative-weight cycle." << endl;
            return;
        }
    }


    cout << "Vertex \t Distance from Source" << endl;
    for (int i = 0; i < V; i++) {
        cout << i << " \t " << distance[i] << endl;
    }
}


int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;


    vector<Edge> edges(E);


    cout << "Enter each edge as: source destination weight\n";
    for (int i = 0; i < E; i++) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }


    int source;
    cout << "Enter the source vertex: ";
    cin >> source;


    bellmanFord(edges, V, E, source);


    return 0;
}
