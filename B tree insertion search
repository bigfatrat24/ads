#include <iostream>
#include <vector>
using namespace std;


class BTreeNode {
public:
    vector<int> keys;
    vector<BTreeNode*> children;
    int degree;
    bool isLeaf;


    BTreeNode(int degree, bool isLeaf);


    void traverse();


    BTreeNode* search(int key);


    void insertNonFull(int key);


    void splitChild(int i, BTreeNode* y);
};


class BTree {
private:
    BTreeNode* root;
    int degree;


public:
    BTree(int degree) : root(nullptr), degree(degree) {}


    void traverse() {
        if (root != nullptr) root->traverse();
    }


    BTreeNode* search(int key) {
        return (root == nullptr) ? nullptr : root->search(key);
    }


    void insert(int key);
};


BTreeNode::BTreeNode(int degree, bool isLeaf)
    : degree(degree), isLeaf(isLeaf) {}


void BTreeNode::traverse() {
    int i;
    for (i = 0; i < keys.size(); i++) {
        if (!isLeaf) {
            children[i]->traverse();
        }
        cout << " " << keys[i];
    }


    if (!isLeaf) {
        children[i]->traverse();
    }
}


BTreeNode* BTreeNode::search(int key) {
    int i = 0;
    while (i < keys.size() && key > keys[i]) {
        i++;
    }


    if (i < keys.size() && keys[i] == key) {
        return this;
    }


    if (isLeaf) {
        return nullptr;
    }


    return children[i]->search(key);
}


void BTree::insert(int key) {
    if (root == nullptr) {
        root = new BTreeNode(degree, true);
        root->keys.push_back(key);
    } else {
        if (root->keys.size() == 2 * degree - 1) {
            BTreeNode* s = new BTreeNode(degree, false);


            s->children.push_back(root);


            s->splitChild(0, root);


            int i = (s->keys[0] < key) ? 1 : 0;
            s->children[i]->insertNonFull(key);


            root = s;
        } else {
            root->insertNonFull(key);
        }
    }
}


void BTreeNode::insertNonFull(int key) {
    int i = keys.size() - 1;


    if (isLeaf) {
        keys.push_back(0);
        while (i >= 0 && keys[i] > key) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = key;
    } else {
        while (i >= 0 && keys[i] > key) {
            i--;
        }
        i++;


        if (children[i]->keys.size() == 2 * degree - 1) {
            splitChild(i, children[i]);


            if (keys[i] < key) {
                i++;
            }
        }
        children[i]->insertNonFull(key);
    }
}


void BTreeNode::splitChild(int i, BTreeNode* y) {
    BTreeNode* z = new BTreeNode(y->degree, y->isLeaf);
    z->keys.assign(y->keys.begin() + degree, y->keys.end());
    y->keys.resize(degree - 1);


    if (!y->isLeaf) {
        z->children.assign(y->children.begin() + degree, y->children.end());
        y->children.resize(degree);
    }


    children.insert(children.begin() + i + 1, z);
    keys.insert(keys.begin() + i, y->keys[degree - 1]);
    y->keys.pop_back();
}


int main() {
    int degree;
    cout << "Enter the degree of the B-Tree: ";
    cin >> degree;


    BTree tree(degree);


    int choice, key;
    do {
        cout << "\nB-Tree Operations:\n";
        cout << "1. Insert\n2. Search\n3. Display\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;


        switch (choice) {
            case 1:
                cout << "Enter key to insert: ";
                cin >> key;
                tree.insert(key);
                break;


            case 2:
                cout << "Enter key to search: ";
                cin >> key;
                if (tree.search(key) != nullptr) {
                    cout << "Key found in the B-Tree." << endl;
                } else {
                    cout << "Key not found in the B-Tree." << endl;
                }
                break;


            case 3:
                cout << "B-Tree elements: ";
                tree.traverse();
                cout << endl;
                break;


            case 4:
                cout << "Exiting..." << endl;
                break;


            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 4);


    return 0;
}
