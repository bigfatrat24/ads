#include <iostream>
#include <map>
#include <string>
using namespace std;


struct Node {
    map<char, Node*> children;
    int start;
    int* end;
    Node* suffixLink;


    Node(int start, int* end) : start(start), end(end), suffixLink(nullptr) {}
};


class SuffixTree {
private:
    string text;
    Node* root;
    Node* activeNode;
    int activeEdge;
    int activeLength;
    int remainingSuffixCount;
    int leafEnd;
    int* rootEnd;
    int* splitEnd;
    Node* lastNewNode;


    Node* createNode(int start, int* end) {
        return new Node(start, end);
    }


    int edgeLength(Node* node) {
        return *(node->end) - node->start + 1;
    }


    bool walkDown(Node* currentNode) {
        if (activeLength >= edgeLength(currentNode)) {
            activeEdge += edgeLength(currentNode);
            activeLength -= edgeLength(currentNode);
            activeNode = currentNode;
            return true;
        }
        return false;
    }


    void extendSuffixTree(int pos) {
        leafEnd = pos;
        remainingSuffixCount++;
        lastNewNode = nullptr;


        while (remainingSuffixCount > 0) {
            if (activeLength == 0) activeEdge = pos;


            if (activeNode->children.find(text[activeEdge]) == activeNode->children.end()) {
                activeNode->children[text[activeEdge]] = createNode(pos, &leafEnd);


                if (lastNewNode != nullptr) {
                    lastNewNode->suffixLink = activeNode;
                    lastNewNode = nullptr;
                }
            } else {
                Node* next = activeNode->children[text[activeEdge]];


                if (walkDown(next)) continue;


                if (text[next->start + activeLength] == text[pos]) {
                    if (lastNewNode != nullptr && activeNode != root) {
                        lastNewNode->suffixLink = activeNode;
                        lastNewNode = nullptr;
                    }
                    activeLength++;
                    break;
                }


                splitEnd = new int(next->start + activeLength - 1);
                Node* split = createNode(next->start, splitEnd);
                activeNode->children[text[activeEdge]] = split;
                split->children[text[pos]] = createNode(pos, &leafEnd);
                next->start += activeLength;
                split->children[text[next->start]] = next;


                if (lastNewNode != nullptr) lastNewNode->suffixLink = split;
                lastNewNode = split;
            }


            remainingSuffixCount--;
            if (activeNode == root && activeLength > 0) {
                activeLength--;
                activeEdge = pos - remainingSuffixCount + 1;
            } else if (activeNode != root) {
                activeNode = activeNode->suffixLink;
            }
        }
    }


    void setSuffixIndexByDFS(Node* node, int labelHeight) {
        if (node == nullptr) return;


        if (node->children.empty()) {
            cout << "Suffix Index: " << text.substr(*(node->end) - labelHeight + 1, labelHeight) << endl;
        }


        for (auto& child : node->children) {
            setSuffixIndexByDFS(child.second, labelHeight + edgeLength(child.second));
        }
    }


public:
    SuffixTree(const string& input) : text(input) {
        rootEnd = new int(-1);
        root = createNode(-1, rootEnd);
        activeNode = root;
        activeEdge = -1;
        activeLength = 0;
        remainingSuffixCount = 0;
        leafEnd = -1;
        lastNewNode = nullptr;


        for (int i = 0; i < text.length(); i++) {
            extendSuffixTree(i);
        }
    }


    void printSuffixTree() {
        setSuffixIndexByDFS(root, 0);
    }
};


int main() {
    string input;
    cout << "Enter the text: ";
    cin >> input;


    SuffixTree tree(input + "$"); // Add a unique terminal character
    cout << "Suffix Tree: " << endl;
    tree.printSuffixTree();


    return 0;
}
